stages:
    - lint
    - test
    - sonar
    - deploy
    - renovate
    - renovate-cleanup
    - supabase-keep-alive

image: node:lts-alpine

.add_git: &add_git
    - apk add --no-cache git

.add_bash: &add_bash
    - apk add --no-cache bash

.add_ssh: &add_ssh
    - 'which ssh-agent || (apk add --no-cache openssh-client)'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

.add_curl: &add_curl
    - apk add --no-cache curl

.setup_env: &setup_env
    - chmod +x ./deploy/setup_env.sh
    - bash ./deploy/setup_env.sh

workflow:
    rules:
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
          when: never
        - if: '$CI_COMMIT_BRANCH || $CI_COMMIT_TAG'

# CI stages
lint:
    stage: lint
    before_script:
        - yarn install
    script:
        - yarn lint
    allow_failure: false
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success

test:
    stage: test
    before_script:
        - *add_git
        - yarn install
    environment:
        name: qa
    variables:
        VITE_SUPABASE_URL: $VITE_SUPABASE_URL
        VITE_SUPABASE_ANON_KEY: $VITE_SUPABASE_ANON_KEY
    script:
        - yarn test
    coverage: '/Lines \W+: (\d+\.\d+)%.*/'
    artifacts:
        expire_in: 1 day
        paths:
            - coverage/
    needs: [lint]
    dependencies:
        - lint
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success

sonar:
    stage: sonar
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: ['']
    variables:
        SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar'
        GIT_DEPTH: '0'
    cache:
        key: '${CI_JOB_NAME}'
        paths:
            - .sonar/cache
    script:
        - sonar-scanner
    needs: [lint, test]
    allow_failure: true
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success

# CD stages
qa:
    stage: deploy
    before_script:
        - *add_bash
        - *add_git
        - *add_ssh
        - *setup_env
    environment:
        name: qa
        url: https://planner-qa.der-hahn.net
    needs: [lint, test, sonar]
    script:
        - bash deploy/deploy.sh
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
          when: never
        - if: $CI_COMMIT_BRANCH == "develop"
          when: on_success
        - if: $CI_COMMIT_BRANCH == "main"
          when: manual

prod:
    stage: deploy
    before_script:
        - *add_bash
        - *add_git
        - *add_ssh
        - *setup_env
    environment:
        name: prod
        url: https://planner.der-hahn.net
    script:
        - bash deploy/deploy.sh
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH == "main"
          when: manual
        - when: never

# cleans the docker system after a renovate run
renovate-clean:
    stage: renovate-cleanup
    variables:
        REMOTE_SSH_HOST: $REMOTE_SSH_HOST
    before_script:
        - *add_bash
        - *add_ssh
    script:
        - ssh root@$REMOTE_SSH_HOST
        - ssh $REMOTE_SSH_HOST "docker system prune -af" # prune all docker images on server
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "develop"'
          when: always
        - when: never

include:
    - project: 'renovate-bot/renovate-runner'
      file: '/templates/renovate.gitlab-ci.yml'
      cache:
          paths:
              - renovate/
          when: 'always'
      variables:
          RENOVATE_BASE_DIR: './renovate'
      rules:
          - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "develop"'
            when: always
    - template: Jobs/SAST.gitlab-ci.yml
      rules:
          - if: $CI_PIPELINE_SOURCE == "schedule"
            when: never
          - when: always

# a simple curl on the supabase api to keep the projects alive
supabase-keep-alive:
    stage: supabase-keep-alive
    before_script:
        - *add_curl
    variables:
        SUPABASE_DEV_URL: https://tnasuovooynucfvinlsh.supabase.co
        SUPABASE_PROD_URL: https://hjyzlczdeldivfnnecix.supabase.co
        TARGET: api/etc/supabase-activity-scheduler
    script:
        - curl $SUPABASE_DEV_URL/$TARGET
        - curl $SUPABASE_PROD_URL/$TARGET
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
          when: always
